const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
    console.error('‚ùå Vari√°veis de ambiente SUPABASE_URL e SUPABASE_SERVICE_ROLE_KEY s√£o necess√°rias');
    process.exit(1);
}

const supabaseAdmin = createClient(supabaseUrl, supabaseServiceKey);

async function testAdminUpdate() {
    console.log('üîß Teste UPDATE com Admin (Service Role Key)...\n');

    try {
        // Teste UPDATE com admin
        console.log('1Ô∏è‚É£ Testando UPDATE em fighters com admin...');
        const { data: updateData, error: updateError } = await supabaseAdmin
            .from('fighters')
            .update({ name: 'Admin Update Test' })
            .eq('id', 1)
            .select();

        if (updateError) {
            console.log('   ‚ùå UPDATE falhou:', updateError.message);
        } else {
            console.log('   ‚úÖ UPDATE funcionou (esperado para admin)');
            console.log('   üìã Dados retornados:', updateData);
            console.log('   üìã Linhas afetadas:', updateData.length);
        }

        // Verificar se a atualiza√ß√£o aconteceu
        console.log('\n2Ô∏è‚É£ Verificando se a atualiza√ß√£o aconteceu...');
        const { data: checkFighter, error: checkError } = await supabaseAdmin
            .from('fighters')
            .select('id, name')
            .eq('id', 1)
            .single();

        if (checkError) {
            console.log('   ‚ùå Erro ao verificar:', checkError.message);
        } else {
            console.log('   üìã Nome atual:', checkFighter.name);
            if (checkFighter.name === 'Admin Update Test') {
                console.log('   ‚úÖ UPDATE realmente funcionou para admin!');
            } else {
                console.log('   ‚ùå UPDATE n√£o funcionou para admin');
            }
        }

        // Teste DELETE com admin
        console.log('\n3Ô∏è‚É£ Testando DELETE em fighters com admin...');
        const { error: deleteError } = await supabaseAdmin
            .from('fighters')
            .delete()
            .eq('id', 999);

        if (deleteError) {
            console.log('   ‚ùå DELETE falhou:', deleteError.message);
        } else {
            console.log('   ‚úÖ DELETE funcionou (esperado para admin)');
        }

    } catch (error) {
        console.error('‚ùå Erro no teste:', error);
    }
}

testAdminUpdate(); 