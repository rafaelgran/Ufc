const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

async function testStatusField() {
    try {
        console.log('üîç Testando atualiza√ß√£o espec√≠fica do campo status...');
        
        // Criar cliente Supabase
        const supabase = createClient(
            process.env.SUPABASE_URL,
            process.env.SUPABASE_SERVICE_ROLE_KEY
        );
        
        // Buscar uma luta para testar
        const { data: fights, error: fightsError } = await supabase
            .from('fights')
            .select('*')
            .limit(1);
        
        if (fightsError) {
            console.error('‚ùå Erro ao buscar lutas:', fightsError);
            return;
        }
        
        if (fights.length === 0) {
            console.log('‚ùå Nenhuma luta encontrada');
            return;
        }
        
        const testFight = fights[0];
        console.log(`\nüéØ Luta de teste: ID ${testFight.id}`);
        console.log(`üìä Status atual: ${testFight.status}`);
        console.log(`üìä is_live atual: ${testFight.is_live}`);
        
        // Testar atualiza√ß√£o apenas do status
        console.log('\nüîÑ Testando atualiza√ß√£o apenas do status...');
        
        const { data: updateData, error: updateError } = await supabase
            .from('fights')
            .update({
                status: 'live'
            })
            .eq('id', testFight.id)
            .select();
        
        if (updateError) {
            console.error('‚ùå Erro ao atualizar status:', updateError);
            return;
        }
        
        console.log(`‚úÖ Status atualizado:`, updateData[0]);
        
        // Verificar se foi realmente atualizado
        const { data: verifyData, error: verifyError } = await supabase
            .from('fights')
            .select('*')
            .eq('id', testFight.id)
            .single();
        
        if (verifyError) {
            console.error('‚ùå Erro ao verificar dados:', verifyError);
            return;
        }
        
        console.log(`üìä Dados ap√≥s atualiza√ß√£o:`);
        console.log(`   - ID: ${verifyData.id}`);
        console.log(`   - Status: ${verifyData.status}`);
        console.log(`   - is_live: ${verifyData.is_live}`);
        
        if (verifyData.status === 'live') {
            console.log('‚úÖ Campo status pode ser atualizado!');
        } else {
            console.log('‚ùå Campo status n√£o foi atualizado');
        }
        
        // Testar atualiza√ß√£o completa
        console.log('\nüîÑ Testando atualiza√ß√£o completa...');
        
        const { data: fullUpdateData, error: fullUpdateError } = await supabase
            .from('fights')
            .update({
                is_live: true,
                status: 'live',
                current_round: 1,
                round_start_time: new Date().toISOString(),
                round_status: 'running'
            })
            .eq('id', testFight.id)
            .select();
        
        if (fullUpdateError) {
            console.error('‚ùå Erro na atualiza√ß√£o completa:', fullUpdateError);
            return;
        }
        
        console.log(`‚úÖ Atualiza√ß√£o completa:`, fullUpdateData[0]);
        
        // Verificar dados finais
        const { data: finalData, error: finalError } = await supabase
            .from('fights')
            .select('*')
            .eq('id', testFight.id)
            .single();
        
        if (finalError) {
            console.error('‚ùå Erro ao verificar dados finais:', finalError);
            return;
        }
        
        console.log(`üìä Dados finais:`);
        console.log(`   - ID: ${finalData.id}`);
        console.log(`   - Status: ${finalData.status}`);
        console.log(`   - is_live: ${finalData.is_live}`);
        console.log(`   - current_round: ${finalData.current_round}`);
        console.log(`   - round_status: ${finalData.round_status}`);
        
        if (finalData.status === 'live' && finalData.is_live === true) {
            console.log('‚úÖ Atualiza√ß√£o completa funcionando!');
        } else {
            console.log('‚ùå Atualiza√ß√£o completa n√£o funcionou');
        }
        
        console.log('\n‚úÖ Teste do campo status conclu√≠do!');
        
    } catch (error) {
        console.error('‚ùå Erro no teste:', error);
        console.error('Stack trace:', error.stack);
    }
}

// Executar o teste
testStatusField(); 