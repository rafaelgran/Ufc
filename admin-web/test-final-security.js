const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey) {
    console.error('‚ùå Vari√°veis de ambiente SUPABASE_URL e SUPABASE_ANON_KEY s√£o necess√°rias');
    process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function testFinalSecurity() {
    console.log('üîí Teste Final de Seguran√ßa RLS...\n');

    try {
        console.log('1Ô∏è‚É£ Testando SELECT (deveria funcionar)...');
        const { data: selectData, error: selectError } = await supabase
            .from('fighters')
            .select('id, name')
            .limit(1);

        if (selectError) {
            console.log('   ‚ùå SELECT falhou:', selectError.message);
        } else {
            console.log('   ‚úÖ SELECT funcionou (esperado)');
        }

        console.log('\n2Ô∏è‚É£ Testando INSERT (deveria ser bloqueado)...');
        const { data: insertData, error: insertError } = await supabase
            .from('fighters')
            .insert({
                name: 'Test Final Security',
                weightclass: 'Test'
            })
            .select();

        if (insertError) {
            console.log('   ‚úÖ INSERT bloqueado:', insertError.message);
        } else {
            console.log('   ‚ùå INSERT funcionou (n√£o esperado)');
            // Limpar o teste
            await supabase.from('fighters').delete().eq('name', 'Test Final Security');
        }

        console.log('\n3Ô∏è‚É£ Testando UPDATE (deveria ser bloqueado)...');
        const { data: updateData, error: updateError } = await supabase
            .from('fighters')
            .update({ name: 'Test Update Final' })
            .eq('id', 1)
            .select();

        if (updateError) {
            console.log('   ‚úÖ UPDATE bloqueado:', updateError.message);
        } else {
            console.log('   ‚ùå UPDATE funcionou (n√£o esperado)');
        }

        console.log('\n4Ô∏è‚É£ Testando DELETE (deveria ser bloqueado)...');
        const { error: deleteError } = await supabase
            .from('fighters')
            .delete()
            .eq('id', 999);

        if (deleteError) {
            console.log('   ‚úÖ DELETE bloqueado:', deleteError.message);
        } else {
            console.log('   ‚ùå DELETE funcionou (n√£o esperado)');
        }

        console.log('\n5Ô∏è‚É£ Testando UPDATE em events...');
        const { error: updateEventsError } = await supabase
            .from('events')
            .update({ name: 'Test Event Update Final' })
            .eq('id', 1);

        if (updateEventsError) {
            console.log('   ‚úÖ UPDATE em events bloqueado:', updateEventsError.message);
        } else {
            console.log('   ‚ùå UPDATE em events funcionou (n√£o esperado)');
        }

        console.log('\n6Ô∏è‚É£ Testando UPDATE em fights...');
        const { error: updateFightsError } = await supabase
            .from('fights')
            .update({ weightclass: 'Test Weight Final' })
            .eq('id', 1);

        if (updateFightsError) {
            console.log('   ‚úÖ UPDATE em fights bloqueado:', updateFightsError.message);
        } else {
            console.log('   ‚ùå UPDATE em fights funcionou (n√£o esperado)');
        }

        console.log('\nüìã RESUMO:');
        console.log('   - Se INSERT est√° bloqueado mas UPDATE/DELETE funcionam,');
        console.log('     h√° uma pol√≠tica espec√≠fica sobrescrevendo as restritivas');
        console.log('   - Se todos est√£o bloqueados, RLS est√° funcionando corretamente');
        console.log('   - Se todos funcionam, RLS n√£o est√° ativo ou h√° pol√≠tica permissiva');

    } catch (error) {
        console.error('‚ùå Erro no teste:', error);
    }
}

testFinalSecurity(); 