import UIKit
import UserNotifications

class AppDelegate: NSObject, UIApplicationDelegate, UNUserNotificationCenterDelegate {
    
    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey : Any]? = nil) -> Bool {
        
        // Configurar delegate para notifica√ß√µes
        UNUserNotificationCenter.current().delegate = self
        
        // Verificar permiss√µes de notifica√ß√£o
        RemoteNotificationService.shared.checkNotificationPermissions()
        
        // Registrar para notifica√ß√µes remotas
        application.registerForRemoteNotifications()
        
        return true
    }
    
    // MARK: - Remote Notifications
    
    func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {
        // Converter o token para string hexadecimal
        let tokenParts = deviceToken.map { data in String(format: "%02.2hhx", data) }
        let token = tokenParts.joined()
        
        print("üì± Device Token: \(token)")
        
        // Registrar dispositivo usando o servi√ßo
        RemoteNotificationService.shared.registerDevice(with: token)
    }
    
    func application(_ application: UIApplication, didFailToRegisterForRemoteNotificationsWithError error: Error) {
        print("‚ùå Failed to register for remote notifications: \(error)")
    }
    
    // MARK: - Notification Handling
    
    func userNotificationCenter(_ center: UNUserNotificationCenter, willPresent notification: UNNotification, withCompletionHandler completionHandler: @escaping (UNNotificationPresentationOptions) -> Void) {
        // Mostrar notifica√ß√£o mesmo quando o app est√° em primeiro plano
        completionHandler([.alert, .badge, .sound])
    }
    
    func userNotificationCenter(_ center: UNUserNotificationCenter, didReceive response: UNNotificationResponse, withCompletionHandler completionHandler: @escaping () -> Void) {
        // Lidar com toque na notifica√ß√£o
        let userInfo = response.notification.request.content.userInfo
        print("üì± Notification tapped: \(userInfo)")
        
        // Verificar se √© uma notifica√ß√£o local ou remota
        if response.notification.request.trigger is UNCalendarNotificationTrigger {
            // Notifica√ß√£o local (agendada)
            print("üì± Processing local notification")
            RemoteNotificationService.shared.handleLocalNotification(userInfo)
        } else {
            // Notifica√ß√£o remota (push do servidor)
            print("üì± Processing server push notification")
            RemoteNotificationService.shared.handleServerPushNotification(userInfo)
        }
        
        completionHandler()
    }
    
    // MARK: - Remote Notification Handling
    
    func application(_ application: UIApplication, didReceiveRemoteNotification userInfo: [AnyHashable: Any], fetchCompletionHandler completionHandler: @escaping (UIBackgroundFetchResult) -> Void) {
        print("üì± Received remote notification: \(userInfo)")
        
        // Processar notifica√ß√£o usando o servi√ßo
        RemoteNotificationService.shared.handleRemoteNotification(userInfo)
        
        // Indicar que a notifica√ß√£o foi processada
        completionHandler(.newData)
    }
}
