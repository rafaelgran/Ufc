// Test script for fighters functions
console.log('ü•ä Testando fun√ß√µes de lutadores...\n');

function testFightersFunctions() {
    console.log('üìã 1. Verificando fun√ß√µes essenciais:');
    
    // Check if essential functions exist
    const essentialFunctions = [
        'handleFighterSubmit',
        'editFighter', 
        'deleteFighter',
        'resetFighterForm',
        'calculateRecord',
        'openFighterModal',
        'displayFighters',
        'displayFightersByCategory',
        'updateCategoryCounts',
        'addCategoryEventListeners'
    ];
    
    essentialFunctions.forEach(funcName => {
        if (typeof window[funcName] === 'function') {
            console.log(`   ‚úÖ ${funcName} - OK`);
        } else {
            console.log(`   ‚ùå ${funcName} - FALTANDO`);
        }
    });
    
    console.log('\nüìã 2. Verificando elementos HTML:');
    
    // Check if HTML elements exist
    const htmlElements = [
        'fighterForm',
        'fighterModal',
        'fighterName',
        'fighterNickname',
        'fighterWins',
        'fighterLosses', 
        'fighterDraws',
        'fighterWeightClass',
        'fighterCountry',
        'fighterRanking',
        'fighterRecordDisplay',
        'fightersList',
        'fightersCategoriesList',
        'fightersCategoryTitle'
    ];
    
    htmlElements.forEach(elementId => {
        const element = document.getElementById(elementId);
        if (element) {
            console.log(`   ‚úÖ ${elementId} - Encontrado`);
        } else {
            console.log(`   ‚ùå ${elementId} - N√£o encontrado`);
        }
    });
    
    console.log('\nüìã 3. Verificando dados globais:');
    
    // Check global data
    if (window.fightersData) {
        console.log(`   ‚úÖ window.fightersData - ${window.fightersData.length} lutadores`);
    } else {
        console.log(`   ‚ùå window.fightersData - N√£o definido`);
    }
    
    console.log('\nüìã 4. Testando funcionalidades:');
    
    // Test category buttons
    const categoryButtons = document.querySelectorAll('#fightersCategoriesList .list-group-item');
    if (categoryButtons.length > 0) {
        console.log(`   ‚úÖ ${categoryButtons.length} bot√µes de categoria encontrados`);
        
        // Test first category button
        const firstButton = categoryButtons[0];
        const category = firstButton.getAttribute('data-category');
        console.log(`   ‚úÖ Primeira categoria: ${category}`);
    } else {
        console.log(`   ‚ùå Nenhum bot√£o de categoria encontrado`);
    }
    
    // Test fighter modal
    const fighterModal = document.getElementById('fighterModal');
    if (fighterModal) {
        console.log(`   ‚úÖ Modal de lutador encontrado`);
        
        // Check if modal can be opened
        try {
            const modal = new bootstrap.Modal(fighterModal);
            console.log(`   ‚úÖ Modal pode ser instanciado`);
        } catch (error) {
            console.log(`   ‚ùå Erro ao instanciar modal: ${error.message}`);
        }
    } else {
        console.log(`   ‚ùå Modal de lutador n√£o encontrado`);
    }
    
    console.log('\nüìã 5. Testando event listeners:');
    
    // Check if event listeners are attached
    const fighterForm = document.getElementById('fighterForm');
    if (fighterForm) {
        console.log(`   ‚úÖ Formul√°rio de lutador encontrado`);
        
        // Check if submit event listener is attached
        const events = getEventListeners(fighterForm);
        if (events && events.submit) {
            console.log(`   ‚úÖ Event listener de submit anexado`);
        } else {
            console.log(`   ‚ùå Event listener de submit n√£o encontrado`);
        }
    } else {
        console.log(`   ‚ùå Formul√°rio de lutador n√£o encontrado`);
    }
    
    console.log('\nüìã 6. Checklist de verifica√ß√£o:');
    console.log('   [ ] Fun√ß√£o handleFighterSubmit definida');
    console.log('   [ ] Fun√ß√£o editFighter definida');
    console.log('   [ ] Fun√ß√£o deleteFighter definida');
    console.log('   [ ] Modal de lutador funciona');
    console.log('   [ ] Formul√°rio de lutador funciona');
    console.log('   [ ] Menu lateral funciona');
    console.log('   [ ] Filtro por categoria funciona');
    console.log('   [ ] Contadores funcionam');
    console.log('   [ ] A√ß√µes de editar/deletar funcionam');
    
    console.log('\nüöÄ 7. Como testar manualmente:');
    console.log('   1. Acesse: http://localhost:3000');
    console.log('   2. V√° para aba "Lutadores"');
    console.log('   3. Clique em "Novo Lutador"');
    console.log('   4. Preencha os dados e salve');
    console.log('   5. Verifique se aparece na lista');
    console.log('   6. Clique em "Editar" em um lutador');
    console.log('   7. Modifique os dados e salve');
    console.log('   8. Clique em "Deletar" em um lutador');
    console.log('   9. Teste o filtro por categoria');
    
    console.log('\nüéØ 8. Problemas poss√≠veis:');
    console.log('   - Fun√ß√µes n√£o definidas');
    console.log('   - Elementos HTML n√£o encontrados');
    console.log('   - Event listeners n√£o anexados');
    console.log('   - Modal n√£o funciona');
    console.log('   - API n√£o responde');
    console.log('   - Dados n√£o carregam');
    
    console.log('\nüîß 9. Logs esperados no console:');
    console.log('   - "handleFighterSubmit called"');
    console.log('   - "editFighter called"');
    console.log('   - "deleteFighter called"');
    console.log('   - "displayFightersByCategory called"');
    console.log('   - "updateCategoryCounts called"');
    
    console.log('\nüéâ Teste das fun√ß√µes de lutadores conclu√≠do!');
    console.log('ü•ä Verifique se todas as fun√ß√µes est√£o funcionando!');
}

// Helper function to get event listeners (if available)
function getEventListeners(element) {
    // This is a simplified check - in real browsers you'd need dev tools
    return null;
}

// Run test when DOM is ready
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', testFightersFunctions);
} else {
    testFightersFunctions();
} 