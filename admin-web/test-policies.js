const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey) {
    console.error('‚ùå Vari√°veis de ambiente SUPABASE_URL e SUPABASE_ANON_KEY s√£o necess√°rias');
    process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function testPolicies() {
    console.log('üîí Testando pol√≠ticas espec√≠ficas...\n');
    
    try {
        // 1. Testar INSERT
        console.log('1Ô∏è‚É£ Testando INSERT...');
        const { data: insertData, error: insertError } = await supabase
            .from('fighters')
            .insert({
                name: 'Test Policy Fighter',
                weightclass: 'Test'
            })
            .select();
        
        if (insertError) {
            console.log('   ‚úÖ INSERT bloqueado:', insertError.message);
        } else {
            console.log('   ‚ö†Ô∏è INSERT funcionou (pol√≠tica permite)');
            // Limpar o teste
            await supabase.from('fighters').delete().eq('name', 'Test Policy Fighter');
        }
        
        // 2. Testar UPDATE
        console.log('\n2Ô∏è‚É£ Testando UPDATE...');
        const { data: updateData, error: updateError } = await supabase
            .from('fighters')
            .update({ name: 'Updated Test' })
            .eq('id', 1)
            .select();
        
        if (updateError) {
            console.log('   ‚úÖ UPDATE bloqueado:', updateError.message);
        } else {
            console.log('   ‚ö†Ô∏è UPDATE funcionou (pol√≠tica permite)');
        }
        
        // 3. Testar DELETE
        console.log('\n3Ô∏è‚É£ Testando DELETE...');
        const { error: deleteError } = await supabase
            .from('fighters')
            .delete()
            .eq('id', 999); // ID que n√£o existe
        
        if (deleteError) {
            console.log('   ‚úÖ DELETE bloqueado:', deleteError.message);
        } else {
            console.log('   ‚ö†Ô∏è DELETE funcionou (pol√≠tica permite)');
        }
        
        // 4. Verificar se h√° pol√≠ticas conflitantes
        console.log('\n4Ô∏è‚É£ Verificando pol√≠ticas...');
        console.log('   üí° Baseado na imagem, voc√™ tem:');
        console.log('   - Pol√≠tica ALL: "Admin only can modify fighters" (public role)');
        console.log('   - Pol√≠tica DELETE: "Enable delete for all users" (public role)');
        console.log('   - Pol√≠tica INSERT: "Enable insert for all users" (public role)');
        console.log('   - Pol√≠tica UPDATE: "Enable update for all users" (public role)');
        console.log('   ');
        console.log('   ‚ö†Ô∏è PROBLEMA: As pol√≠ticas espec√≠ficas (DELETE, INSERT, UPDATE)');
        console.log('   est√£o sobrescrevendo a pol√≠tica ALL que deveria bloquear tudo!');
        
    } catch (error) {
        console.error('‚ùå Erro no teste:', error);
    }
}

testPolicies(); 