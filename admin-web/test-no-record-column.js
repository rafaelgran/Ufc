const axios = require('axios');

console.log('üîß Teste do Sistema sem Coluna Record...\n');

async function testSystemWithoutRecord() {
    try {
        // 1. Testar busca de lutadores
        console.log('1Ô∏è‚É£ Testando busca de lutadores...');
        const fightersResponse = await axios.get('http://localhost:3000/api/fighters');
        const fighters = fightersResponse.data;
        
        console.log(`   ‚úÖ Lutadores encontrados: ${fighters.length}`);
        
        // Verificar se os lutadores t√™m wins, losses, draws mas n√£o t√™m record
        const firstFighter = fighters[0];
        if (firstFighter) {
            console.log(`   üìã Primeiro lutador: ${firstFighter.name}`);
            console.log(`   üìã Wins: ${firstFighter.wins}, Losses: ${firstFighter.losses}, Draws: ${firstFighter.draws}`);
            console.log(`   üìã Tem coluna record: ${firstFighter.hasOwnProperty('record')}`);
            
            if (firstFighter.hasOwnProperty('record')) {
                console.log('   ‚ö†Ô∏è Ainda tem coluna record no banco! Execute o SQL para remov√™-la.');
            } else {
                console.log('   ‚úÖ Coluna record removida com sucesso!');
            }
        }
        
        // 2. Testar cria√ß√£o de lutador
        console.log('\n2Ô∏è‚É£ Testando cria√ß√£o de lutador...');
        const createResponse = await axios.post('http://localhost:3000/api/fighters', {
            name: 'Test Fighter No Record',
            nickname: 'Test',
            wins: 5,
            losses: 2,
            draws: 1,
            weightclass: 'Lightweight',
            country: 'Brazil'
        });
        
        const newFighterId = createResponse.data.id;
        console.log(`   ‚úÖ Lutador criado com ID: ${newFighterId}`);
        console.log(`   üìã Record calculado: ${createResponse.data.wins}-${createResponse.data.losses}-${createResponse.data.draws}`);
        
        // 3. Testar atualiza√ß√£o de lutador
        console.log('\n3Ô∏è‚É£ Testando atualiza√ß√£o de lutador...');
        const updateResponse = await axios.put(`http://localhost:3000/api/fighters/${newFighterId}`, {
            name: 'Test Fighter No Record Updated',
            wins: 6,
            losses: 2,
            draws: 1
        });
        
        console.log(`   ‚úÖ Lutador atualizado`);
        console.log(`   üìã Novo record: ${updateResponse.data.wins}-${updateResponse.data.losses}-${updateResponse.data.draws}`);
        
        // 4. Testar cria√ß√£o de luta com resultado
        console.log('\n4Ô∏è‚É£ Testando cria√ß√£o de luta com resultado...');
        const fightResponse = await axios.post('http://localhost:3000/api/fights', {
            eventid: 1,
            fighter1id: newFighterId,
            fighter2id: 2,
            weightclass: 'Lightweight',
            fighttype: 'Main Card',
            fightorder: 1,
            rounds: 3
        });
        
        const fightId = fightResponse.data.id;
        console.log(`   ‚úÖ Luta criada com ID: ${fightId}`);
        
        // 5. Testar salvamento de resultado
        console.log('\n5Ô∏è‚É£ Testando salvamento de resultado...');
        const resultResponse = await axios.post(`http://localhost:3000/api/fights/${fightId}/save-result`, {
            resultType: 'DE',
            finalRound: 3,
            finalTime: '05:00',
            winnerId: newFighterId
        });
        
        console.log(`   ‚úÖ Resultado salvo`);
        
        // 6. Verificar se o record do vencedor foi atualizado
        console.log('\n6Ô∏è‚É£ Verificando atualiza√ß√£o do record...');
        const updatedFighterResponse = await axios.get(`http://localhost:3000/api/fighters/${newFighterId}`);
        const updatedFighter = updatedFighterResponse.data;
        
        console.log(`   üìã Record ap√≥s vit√≥ria: ${updatedFighter.wins}-${updatedFighter.losses}-${updatedFighter.draws}`);
        
        if (updatedFighter.wins === 7) {
            console.log('   ‚úÖ Record atualizado corretamente!');
        } else {
            console.log('   ‚ùå Record n√£o foi atualizado corretamente!');
        }
        
        // 7. Limpar dados de teste
        console.log('\n7Ô∏è‚É£ Limpando dados de teste...');
        await axios.delete(`http://localhost:3000/api/fights/${fightId}`);
        await axios.delete(`http://localhost:3000/api/fighters/${newFighterId}`);
        console.log('   ‚úÖ Dados de teste removidos');
        
        console.log('\nüéâ Teste do sistema sem coluna record conclu√≠do com sucesso!');
        
    } catch (error) {
        console.error('‚ùå Erro no teste:', error.response?.data || error.message);
    }
}

testSystemWithoutRecord(); 