// Script para corrigir problemas de navega√ß√£o de tabs
console.log('üîß Corrigindo navega√ß√£o de tabs...\n');

function corrigirNavegacaoTabs() {
    console.log('üìã 1. Verificando estrutura de tabs:');
    
    // Verificar se as tabs existem
    const eventsTab = document.getElementById('events-tab');
    const fightersTab = document.getElementById('fighters-tab');
    const liveTab = document.getElementById('live-tab');
    
    console.log('   - Events tab:', eventsTab ? '‚úÖ Encontrada' : '‚ùå N√£o encontrada');
    console.log('   - Fighters tab:', fightersTab ? '‚úÖ Encontrada' : '‚ùå N√£o encontrada');
    console.log('   - Live tab:', liveTab ? '‚úÖ Encontrada' : '‚ùå N√£o encontrada');
    
    // Verificar se as panes existem
    const eventsPane = document.getElementById('events');
    const fightersPane = document.getElementById('fighters');
    const livePane = document.getElementById('live');
    
    console.log('   - Events pane:', eventsPane ? '‚úÖ Encontrada' : '‚ùå N√£o encontrada');
    console.log('   - Fighters pane:', fightersPane ? '‚úÖ Encontrada' : '‚ùå N√£o encontrada');
    console.log('   - Live pane:', livePane ? '‚úÖ Encontrada' : '‚ùå N√£o encontrada');
    
    console.log('\nüìã 2. Verificando sistema de navega√ß√£o:');
    
    // Verificar se as fun√ß√µes de navega√ß√£o existem
    console.log('   - activateTab:', typeof activateTab === 'function' ? '‚úÖ Existe' : '‚ùå N√£o existe');
    console.log('   - navigateToTab:', typeof navigateToTab === 'function' ? '‚úÖ Existe' : '‚ùå N√£o existe');
    
    // Verificar se TAB_ANCHORS existe
    console.log('   - TAB_ANCHORS:', typeof TAB_ANCHORS !== 'undefined' ? '‚úÖ Existe' : '‚ùå N√£o existe');
    if (typeof TAB_ANCHORS !== 'undefined') {
        console.log('     Conte√∫do:', TAB_ANCHORS);
    }
    
    console.log('\nüìã 3. Corrigindo event listeners das tabs:');
    
    // Remover todos os event listeners existentes das tabs
    [eventsTab, fightersTab, liveTab].forEach(tab => {
        if (tab) {
            // Clonar o elemento para remover event listeners
            const newTab = tab.cloneNode(true);
            tab.parentNode.replaceChild(newTab, tab);
            console.log(`   ‚úÖ ${newTab.id} - Event listeners removidos`);
        }
    });
    
    // Adicionar novos event listeners
    const newEventsTab = document.getElementById('events-tab');
    const newFightersTab = document.getElementById('fighters-tab');
    const newLiveTab = document.getElementById('live-tab');
    
    if (newEventsTab) {
        newEventsTab.addEventListener('click', function(e) {
            e.preventDefault();
            console.log('Events tab clicada');
            if (typeof navigateToTab === 'function') {
                navigateToTab('events');
            } else if (typeof activateTab === 'function') {
                activateTab('events');
            } else {
                // Fallback manual
                ativarTabManual('events');
            }
        });
        console.log('   ‚úÖ Event listener adicionado ao events tab');
    }
    
    if (newFightersTab) {
        newFightersTab.addEventListener('click', function(e) {
            e.preventDefault();
            console.log('Fighters tab clicada');
            if (typeof navigateToTab === 'function') {
                navigateToTab('fighters');
            } else if (typeof activateTab === 'function') {
                activateTab('fighters');
            } else {
                // Fallback manual
                ativarTabManual('fighters');
            }
        });
        console.log('   ‚úÖ Event listener adicionado ao fighters tab');
    }
    
    if (newLiveTab) {
        newLiveTab.addEventListener('click', function(e) {
            e.preventDefault();
            console.log('Live tab clicada');
            if (typeof navigateToTab === 'function') {
                navigateToTab('live');
            } else if (typeof activateTab === 'function') {
                activateTab('live');
            } else {
                // Fallback manual
                ativarTabManual('live');
            }
        });
        console.log('   ‚úÖ Event listener adicionado ao live tab');
    }
    
    console.log('\nüìã 4. Criando fun√ß√£o de fallback:');
    
    // Criar fun√ß√£o de fallback se n√£o existir
    if (typeof ativarTabManual !== 'function') {
        window.ativarTabManual = function(tabId) {
            console.log(`Ativando tab manualmente: ${tabId}`);
            
            // Desativar todas as tabs
            const allTabs = document.querySelectorAll('.nav-link');
            const allPanes = document.querySelectorAll('.tab-pane');
            
            allTabs.forEach(tab => {
                tab.classList.remove('active');
                tab.setAttribute('aria-selected', 'false');
            });
            
            allPanes.forEach(pane => {
                pane.classList.remove('show', 'active');
            });
            
            // Ativar a tab selecionada
            const targetTab = document.getElementById(`${tabId}-tab`);
            const targetPane = document.getElementById(tabId);
            
            if (targetTab) {
                targetTab.classList.add('active');
                targetTab.setAttribute('aria-selected', 'true');
                console.log(`   ‚úÖ Tab ${tabId} ativada`);
            }
            
            if (targetPane) {
                targetPane.classList.add('show', 'active');
                console.log(`   ‚úÖ Pane ${tabId} ativada`);
            }
            
            // Atualizar URL
            window.location.hash = tabId;
            
            // Carregar dados espec√≠ficos da tab
            if (tabId === 'fighters' && typeof loadFighters === 'function') {
                loadFighters();
            }
        };
        console.log('   ‚úÖ Fun√ß√£o ativarTabManual criada');
    } else {
        console.log('   ‚úÖ Fun√ß√£o ativarTabManual j√° existe');
    }
    
    console.log('\nüìã 5. Testando navega√ß√£o:');
    
    // Testar navega√ß√£o para cada tab
    setTimeout(() => {
        console.log('   - Testando navega√ß√£o para fighters...');
        if (typeof ativarTabManual === 'function') {
            ativarTabManual('fighters');
            
            setTimeout(() => {
                const fightersTab = document.getElementById('fighters-tab');
                const fightersPane = document.getElementById('fighters');
                
                if (fightersTab && fightersTab.classList.contains('active')) {
                    console.log('   ‚úÖ Tab fighters est√° ativa');
                } else {
                    console.log('   ‚ùå Tab fighters n√£o est√° ativa');
                }
                
                if (fightersPane && fightersPane.classList.contains('active')) {
                    console.log('   ‚úÖ Pane fighters est√° ativa');
                } else {
                    console.log('   ‚ùå Pane fighters n√£o est√° ativa');
                }
                
                // Verificar se os lutadores foram carregados
                if (typeof window.fightersData !== 'undefined') {
                    console.log(`   ‚úÖ Dados de lutadores carregados: ${window.fightersData.length} lutadores`);
                } else {
                    console.log('   ‚ö†Ô∏è Dados de lutadores n√£o carregados');
                }
            }, 100);
        }
    }, 500);
    
    console.log('\nüìã 6. Verificando Bootstrap:');
    
    // Verificar se Bootstrap est√° carregado
    if (typeof bootstrap !== 'undefined') {
        console.log('   ‚úÖ Bootstrap est√° carregado');
        
        // Tentar usar Bootstrap para ativar tabs
        try {
            const tabElements = document.querySelectorAll('[data-bs-toggle="tab"]');
            console.log(`   - Encontrados ${tabElements.length} elementos com data-bs-toggle="tab"`);
            
            tabElements.forEach(tab => {
                const tabId = tab.getAttribute('href') || tab.getAttribute('data-bs-target');
                console.log(`     - ${tabId}`);
            });
        } catch (error) {
            console.log('   ‚ùå Erro ao verificar elementos Bootstrap:', error.message);
        }
    } else {
        console.log('   ‚ùå Bootstrap n√£o est√° carregado');
    }
    
    console.log('\nüéâ Corre√ß√£o de navega√ß√£o conclu√≠da!');
    console.log('üöÄ Agora teste clicando nas tabs');
}

// Fun√ß√£o para testar navega√ß√£o manual
function testarNavegacao() {
    console.log('\nüß™ Testando navega√ß√£o manual...');
    
    const tabs = ['events', 'fighters', 'live'];
    
    tabs.forEach((tabId, index) => {
        setTimeout(() => {
            console.log(`\n   - Testando ${tabId}...`);
            if (typeof ativarTabManual === 'function') {
                ativarTabManual(tabId);
                
                setTimeout(() => {
                    const tab = document.getElementById(`${tabId}-tab`);
                    const pane = document.getElementById(tabId);
                    
                    if (tab && tab.classList.contains('active')) {
                        console.log(`   ‚úÖ ${tabId} tab ativa`);
                    } else {
                        console.log(`   ‚ùå ${tabId} tab n√£o ativa`);
                    }
                    
                    if (pane && pane.classList.contains('active')) {
                        console.log(`   ‚úÖ ${tabId} pane ativa`);
                    } else {
                        console.log(`   ‚ùå ${tabId} pane n√£o ativa`);
                    }
                }, 100);
            }
        }, index * 1000);
    });
}

// Executar corre√ß√£o quando DOM estiver pronto
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', corrigirNavegacaoTabs);
} else {
    corrigirNavegacaoTabs();
}

// Expor fun√ß√£o de teste globalmente
window.testarNavegacao = testarNavegacao; 