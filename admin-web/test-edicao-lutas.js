// Test script for fight editing functionality
console.log('ü•ä Testando funcionalidade de edi√ß√£o de lutas...\n');

function testFightEditing() {
    console.log('üìã 1. Verificando se selectedEvent est√° definido:');
    
    // Check if selectedEvent exists
    if (typeof selectedEvent !== 'undefined' && selectedEvent !== null) {
        console.log('‚úÖ selectedEvent est√° definido');
        console.log(`   - ID: ${selectedEvent.id}`);
        console.log(`   - Nome: ${selectedEvent.name}`);
    } else {
        console.log('‚ùå selectedEvent N√ÉO est√° definido');
        console.log('   - Isso pode causar erros ao editar lutas');
    }
    
    console.log('\nüìã 2. Verificando elementos do formul√°rio de luta:');
    
    // Check fight form elements
    const fightForm = document.getElementById('fightForm');
    if (fightForm) {
        console.log('‚úÖ Formul√°rio de luta encontrado');
    } else {
        console.log('‚ùå Formul√°rio de luta N√ÉO encontrado');
    }
    
    const fightId = document.getElementById('fightId');
    if (fightId) {
        console.log('‚úÖ Campo fightId encontrado');
    } else {
        console.log('‚ùå Campo fightId N√ÉO encontrado');
    }
    
    const fightWeightClass = document.getElementById('fightWeightClass');
    if (fightWeightClass) {
        console.log('‚úÖ Campo weightClass encontrado');
    } else {
        console.log('‚ùå Campo weightClass N√ÉO encontrado');
    }
    
    const fighter1 = document.getElementById('fighter1');
    if (fighter1) {
        console.log('‚úÖ Campo fighter1 encontrado');
    } else {
        console.log('‚ùå Campo fighter1 N√ÉO encontrado');
    }
    
    const fighter2 = document.getElementById('fighter2');
    if (fighter2) {
        console.log('‚úÖ Campo fighter2 encontrado');
    } else {
        console.log('‚ùå Campo fighter2 N√ÉO encontrado');
    }
    
    const fightType = document.getElementById('fightType');
    if (fightType) {
        console.log('‚úÖ Campo fightType encontrado');
    } else {
        console.log('‚ùå Campo fightType N√ÉO encontrado');
    }
    
    const fightRounds = document.getElementById('fightRounds');
    if (fightRounds) {
        console.log('‚úÖ Campo fightRounds encontrado');
    } else {
        console.log('‚ùå Campo fightRounds N√ÉO encontrado');
    }
    
    console.log('\nüìã 3. Verificando fun√ß√µes de luta:');
    
    // Check if functions exist
    if (typeof handleFightSubmit === 'function') {
        console.log('‚úÖ handleFightSubmit est√° definida');
    } else {
        console.log('‚ùå handleFightSubmit N√ÉO est√° definida');
    }
    
    if (typeof editFight === 'function') {
        console.log('‚úÖ editFight est√° definida');
    } else {
        console.log('‚ùå editFight N√ÉO est√° definida');
    }
    
    if (typeof deleteFight === 'function') {
        console.log('‚úÖ deleteFight est√° definida');
    } else {
        console.log('‚ùå deleteFight N√ÉO est√° definida');
    }
    
    if (typeof filterFightersByWeightClass === 'function') {
        console.log('‚úÖ filterFightersByWeightClass est√° definida');
    } else {
        console.log('‚ùå filterFightersByWeightClass N√ÉO est√° definida');
    }
    
    console.log('\nüìã 4. Verificando dados de lutas:');
    
    // Check if fights data exists
    if (typeof window.fightsData !== 'undefined' && window.fightsData) {
        console.log(`‚úÖ Dados de lutas encontrados: ${window.fightsData.length} lutas`);
        
        if (window.fightsData.length > 0) {
            console.log('   - Primeira luta:');
            console.log(`     * ID: ${window.fightsData[0].id}`);
            console.log(`     * Event ID: ${window.fightsData[0].eventid || window.fightsData[0].eventId}`);
            console.log(`     * Weight Class: ${window.fightsData[0].weightclass || window.fightsData[0].weightClass}`);
            console.log(`     * Fighter 1: ${window.fightsData[0].fighter1id || window.fightsData[0].fighter1Id}`);
            console.log(`     * Fighter 2: ${window.fightsData[0].fighter2id || window.fightsData[0].fighter2Id}`);
        }
    } else {
        console.log('‚ùå Dados de lutas N√ÉO encontrados');
    }
    
    console.log('\nüìã 5. Verificando dados de lutadores:');
    
    // Check if fighters data exists
    if (typeof window.fightersData !== 'undefined' && window.fightersData) {
        console.log(`‚úÖ Dados de lutadores encontrados: ${window.fightersData.length} lutadores`);
    } else {
        console.log('‚ùå Dados de lutadores N√ÉO encontrados');
    }
    
    console.log('\nüìã 6. Testando simula√ß√£o de edi√ß√£o:');
    
    // Simulate editing a fight
    if (window.fightsData && window.fightsData.length > 0) {
        const testFight = window.fightsData[0];
        console.log(`   - Simulando edi√ß√£o da luta ID: ${testFight.id}`);
        
        // Check if we can populate the form
        if (fightId) {
            fightId.value = testFight.id;
            console.log(`   ‚úÖ fightId preenchido: ${fightId.value}`);
        }
        
        if (fightWeightClass) {
            fightWeightClass.value = testFight.weightclass || testFight.weightClass || '';
            console.log(`   ‚úÖ weightClass preenchido: ${fightWeightClass.value}`);
        }
        
        if (fightType) {
            fightType.value = testFight.fighttype || testFight.fightType || '';
            console.log(`   ‚úÖ fightType preenchido: ${fightType.value}`);
        }
        
        if (fightRounds) {
            fightRounds.value = testFight.rounds || 3;
            console.log(`   ‚úÖ rounds preenchido: ${fightRounds.value}`);
        }
        
        console.log('   - Formul√°rio preenchido com sucesso!');
    } else {
        console.log('   - Nenhuma luta dispon√≠vel para teste');
    }
    
    console.log('\nüìã 7. Verificando event listeners:');
    
    // Check if event listeners are attached
    if (fightForm) {
        const listeners = getEventListeners(fightForm);
        if (listeners.submit && listeners.submit.length > 0) {
            console.log('‚úÖ Event listener de submit est√° anexado ao formul√°rio');
        } else {
            console.log('‚ùå Event listener de submit N√ÉO est√° anexado ao formul√°rio');
        }
    }
    
    if (fightWeightClass) {
        const listeners = getEventListeners(fightWeightClass);
        if (listeners.change && listeners.change.length > 0) {
            console.log('‚úÖ Event listener de change est√° anexado ao weightClass');
        } else {
            console.log('‚ùå Event listener de change N√ÉO est√° anexado ao weightClass');
        }
    }
    
    console.log('\nüöÄ 8. Como testar manualmente:');
    console.log('   1. Acesse: http://localhost:3000');
    console.log('   2. Selecione um evento');
    console.log('   3. V√° para a aba de detalhes do evento');
    console.log('   4. Clique em "Editar" em uma luta');
    console.log('   5. Verifique se os campos s√£o preenchidos');
    console.log('   6. Modifique algum campo');
    console.log('   7. Clique em "Salvar"');
    console.log('   8. Verifique se a luta foi atualizada');
    
    console.log('\nüéØ 9. Problemas comuns e solu√ß√µes:');
    console.log('   ‚ùå Erro: "Cannot read properties of null (reading \'id\')"');
    console.log('   ‚úÖ Solu√ß√£o: Verificar se selectedEvent est√° definido');
    console.log('   ‚ùå Erro: "Cannot read properties of null (reading \'addEventListener\')"');
    console.log('   ‚úÖ Solu√ß√£o: Verificar se elementos existem antes de adicionar listeners');
    console.log('   ‚ùå Erro: "handleFightSubmit is not defined"');
    console.log('   ‚úÖ Solu√ß√£o: Verificar se fun√ß√£o foi restaurada no c√≥digo');
    
    console.log('\nüéâ Teste de edi√ß√£o de lutas conclu√≠do!');
}

// Helper function to get event listeners (if available)
function getEventListeners(element) {
    const listeners = {};
    try {
        // This is a simplified version - in real browsers you'd need devtools
        listeners.submit = element.onsubmit ? [element.onsubmit] : [];
        listeners.change = element.onchange ? [element.onchange] : [];
    } catch (error) {
        console.log('   - N√£o foi poss√≠vel verificar event listeners');
    }
    return listeners;
}

// Run test when DOM is ready
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', testFightEditing);
} else {
    testFightEditing();
} 