const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey) {
    console.error('‚ùå Vari√°veis de ambiente SUPABASE_URL e SUPABASE_ANON_KEY s√£o necess√°rias');
    process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function testRLSStatus() {
    console.log('üîí Testando Status do RLS...\n');
    
    try {
        // 1. Testar se conseguimos fazer uma opera√ß√£o que deveria ser bloqueada
        console.log('1Ô∏è‚É£ Testando UPDATE que deveria ser bloqueado...');
        const { data: updateData, error: updateError } = await supabase
            .from('fighters')
            .update({ name: 'Test RLS' })
            .eq('id', 1)
            .select();

        if (updateError) {
            console.log('   ‚úÖ UPDATE bloqueado:', updateError.message);
            console.log('   üîç C√≥digo do erro:', updateError.code);
            console.log('   üîç Detalhes:', updateError.details);
        } else {
            console.log('   ‚ùå UPDATE funcionou (n√£o esperado)');
            console.log('   üîç Dados retornados:', updateData);
        }

        // 2. Testar se conseguimos fazer uma opera√ß√£o que deveria ser permitida
        console.log('\n2Ô∏è‚É£ Testando SELECT que deveria ser permitido...');
        const { data: selectData, error: selectError } = await supabase
            .from('fighters')
            .select('id, name')
            .limit(1);

        if (selectError) {
            console.log('   ‚ùå SELECT falhou:', selectError.message);
        } else {
            console.log('   ‚úÖ SELECT funcionou (esperado)');
            console.log('   üîç Dados retornados:', selectData);
        }

        // 3. Verificar se h√° alguma pol√≠tica que est√° permitindo tudo
        console.log('\n3Ô∏è‚É£ Testando INSERT que deveria ser bloqueado...');
        const { data: insertData, error: insertError } = await supabase
            .from('fighters')
            .insert({
                name: 'Test RLS Insert',
                weightclass: 'Test'
            })
            .select();

        if (insertError) {
            console.log('   ‚úÖ INSERT bloqueado:', insertError.message);
            console.log('   üîç C√≥digo do erro:', insertError.code);
        } else {
            console.log('   ‚ùå INSERT funcionou (n√£o esperado)');
            console.log('   üîç Dados retornados:', insertData);
        }

        // 4. Testar DELETE
        console.log('\n4Ô∏è‚É£ Testando DELETE que deveria ser bloqueado...');
        const { error: deleteError } = await supabase
            .from('fighters')
            .delete()
            .eq('id', 999);

        if (deleteError) {
            console.log('   ‚úÖ DELETE bloqueado:', deleteError.message);
            console.log('   üîç C√≥digo do erro:', deleteError.code);
        } else {
            console.log('   ‚ùå DELETE funcionou (n√£o esperado)');
        }

    } catch (error) {
        console.error('‚ùå Erro no teste:', error);
    }
}

testRLSStatus(); 